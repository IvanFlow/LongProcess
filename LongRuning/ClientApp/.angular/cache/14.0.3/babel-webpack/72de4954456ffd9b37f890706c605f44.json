{"ast":null,"code":"import _asyncToGenerator from \"C:/repos/LongRuning/LongRuning/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\n\nfunction EncoderComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \" Deber de ser de 3 letras \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class EncoderComponent {\n  constructor(cd, formBuilder) {\n    this.cd = cd;\n    this.formBuilder = formBuilder;\n    this.streamedResults = [];\n    this.myForm = this.formBuilder.group({\n      textToEncode: ['']\n    });\n    this.getEncodedStreamed();\n  }\n\n  encodeText() {\n    console.log(\"encoded\");\n  }\n\n  getEncodedStreamed() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\n        allowHTTP1ForStreamingUpload: true\n      });\n\n      if (response.body == null) {\n        throw new Error('Not possible in current scenario');\n      }\n\n      const reader = response.body.getReader();\n      const streamedResults = _this.streamedResults;\n      const cd = _this.cd;\n\n      function printStream() {\n        return _printStream.apply(this, arguments);\n      }\n\n      function _printStream() {\n        _printStream = _asyncToGenerator(function* () {\n          const {\n            done,\n            value\n          } = yield reader.read();\n\n          if (done) {\n            return;\n          }\n\n          const textDecoder = new TextDecoder();\n          const stringValue = textDecoder.decode(value);\n          streamedResults.push(stringValue);\n          cd.markForCheck();\n          yield printStream();\n        });\n        return _printStream.apply(this, arguments);\n      }\n\n      yield printStream();\n    })();\n  }\n\n  validField(campo) {\n    var _a, _b;\n\n    return ((_a = this.miFormulario.controls[campo]) === null || _a === void 0 ? void 0 : _a.errors) && ((_b = this.miFormulario.controls[campo]) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n}\n\nEncoderComponent.ɵfac = function EncoderComponent_Factory(t) {\n  return new (t || EncoderComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nEncoderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EncoderComponent,\n  selectors: [[\"app-encoder\"]],\n  decls: 18,\n  vars: 2,\n  consts: [[3, \"ngSubmit\"], [1, \"mb-3\", \"row\"], [1, \"col-sm-3\", \"col-form-label\"], [1, \"col-sm-9\"], [\"type\", \"text\", \"placeholder\", \"Text to encode\", \"formControlName\", \"textToEncode\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [1, \"row\"], [1, \"col\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"float-end\"], [1, \"form-text\", \"text-danger\"]],\n  template: function EncoderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Encoder: \");\n      i0.ɵɵelementStart(2, \"small\");\n      i0.ɵɵtext(3, \"Base64\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EncoderComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.encodeText();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"Producto\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3);\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵtemplate(11, EncoderComponent_span_11_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 6)(13, \"div\", 7)(14, \"button\", 8);\n      i0.ɵɵtext(15, \" Encode \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(16, \"p\");\n      i0.ɵɵtext(17);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.validField(\"textToEncode\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.streamedResults.join(\"\"));\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.NgForm, i1.FormControlName],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":";;;;;;;IAeMA;IAEEA;IACFA;;;;ACVN,OAAM,MAAOC,gBAAP,CAAuB;EAM3BC,YAA8BC,EAA9B,EAA6DC,WAA7D,EAAqF;IAAvD;IAA+B;IALtD,uBAA4B,EAA5B;IACP,cAAoB,KAAKA,WAAL,CAAiBC,KAAjB,CAAuB;MACzCC,YAAY,EAAE,CAAC,EAAD;IAD2B,CAAvB,CAApB;IAKE,KAAKC,kBAAL;EACD;;EAEMC,UAAU;IACfC,OAAO,CAACC,GAAR,CAAY,SAAZ;EACD;;EAEYH,kBAAkB;IAAA;;IAAA;MAC7B,MAAMI,QAAQ,SAASC,KAAK,CAAC,iEAAD,EAAoE;QAC9FC,4BAA4B,EAAE;MADgE,CAApE,CAA5B;;MAGA,IAAIF,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;QACzB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;MACD;;MACD,MAAMC,MAAM,GAAGL,QAAQ,CAACG,IAAT,CAAcG,SAAd,EAAf;MAEA,MAAMC,eAAe,GAAG,KAAI,CAACA,eAA7B;MACA,MAAMf,EAAE,GAAG,KAAI,CAACA,EAAhB;;MAV6B,SAYdgB,WAZc;QAAA;MAAA;;MAAA;QAAA,iCAY7B,aAA0B;UACxB,MAAM;YAAEC,IAAF;YAAQC;UAAR,UAAwBL,MAAM,CAACM,IAAP,EAA9B;;UACA,IAAIF,IAAJ,EAAU;YACR;UACD;;UACD,MAAMG,WAAW,GAAG,IAAIC,WAAJ,EAApB;UACA,MAAMC,WAAW,GAAGF,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,CAApB;UAEAH,eAAe,CAACS,IAAhB,CAAqBF,WAArB;UACAtB,EAAE,CAACyB,YAAH;UAEA,MAAMT,WAAW,EAAjB;QACD,CAxB4B;QAAA;MAAA;;MA0B7B,MAAMA,WAAW,EAAjB;IA1B6B;EA2B9B;;EAEDU,UAAU,CAACC,KAAD,EAAc;;;IACtB,OAAO,YAAKC,YAAL,CAAkBC,QAAlB,CAA2BF,KAA3B,OAAiC,IAAjC,IAAiCG,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEC,MAAnC,MAA6C,WAAKH,YAAL,CAAkBC,QAAlB,CAA2BF,KAA3B,OAAiC,IAAjC,IAAiCK,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEC,OAAhF,CAAP;EACD;;AA7C0B;;;mBAAhBnC,kBAAgBD;AAAA;;;QAAhBC;EAAgBoC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP7BzC;MAAIA;MAASA;MAAOA;MAAMA;MAC1BA;MACAA;MAAMA;QAAA,OAAY0C,gBAAZ;MAAwB,CAAxB;MAEJ1C,+BAAsB,CAAtB,EAAsB,OAAtB,EAAsB,CAAtB;MAEyCA;MAAQA;MAE/CA;MACEA;MAKAA;MAIFA;MAKFA,gCAAiB,EAAjB,EAAiB,KAAjB,EAAiB,CAAjB,EAAiB,EAAjB,EAAiB,QAAjB,EAAiB,CAAjB;MAIMA;MACFA;MAINA;MAAGA;MAA4BA;;;;MAjBlBA;MAAAA;MAiBVA;MAAAA","names":["i0","EncoderComponent","constructor","cd","formBuilder","group","textToEncode","getEncodedStreamed","encodeText","console","log","response","fetch","allowHTTP1ForStreamingUpload","body","Error","reader","getReader","streamedResults","printStream","done","value","read","textDecoder","TextDecoder","stringValue","decode","push","markForCheck","validField","campo","miFormulario","controls","_a","errors","_b","touched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.html","C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.ts"],"sourcesContent":["\r\n<h2>Encoder: <small>Base64</small></h2>\r\n<hr>\r\n<form (ngSubmit)=\"encodeText()\">\r\n\r\n  <div class=\"mb-3 row\">\r\n\r\n    <label class=\"col-sm-3 col-form-label\">Producto</label>\r\n\r\n    <div class=\"col-sm-9\">\r\n      <input type=\"text\"\r\n             class=\"form-control\"\r\n             placeholder=\"Text to encode\"\r\n             formControlName=\"textToEncode\">\r\n\r\n      <span class=\"form-text text-danger\"\r\n            *ngIf=\"validField('textToEncode')\">\r\n        Deber de ser de 3 letras\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <button type=\"submit\"\r\n              class=\"btn btn-primary float-end\">\r\n        Encode\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n<p>{{streamedResults.join(\"\")}}</p>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-encoder',\r\n  templateUrl: './encoder.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EncoderComponent {\r\n  public streamedResults: string[] = [];\r\n  myForm: FormGroup = this.formBuilder.group({\r\n    textToEncode: ['']\r\n  });\r\n\r\n  constructor( private readonly cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    this.getEncodedStreamed();\r\n  }\r\n\r\n  public encodeText() {\r\n    console.log(\"encoded\");\r\n  }\r\n\r\n  public async getEncodedStreamed(): Promise<void> {\r\n    const response = await fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\r\n      allowHTTP1ForStreamingUpload: true,\r\n    } as any);\r\n    if (response.body == null) {\r\n      throw new Error('Not possible in current scenario');\r\n    }\r\n    const reader = response.body.getReader();\r\n\r\n    const streamedResults = this.streamedResults;\r\n    const cd = this.cd;\r\n\r\n    async function printStream(): Promise<void> {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      const textDecoder = new TextDecoder();\r\n      const stringValue = textDecoder.decode(value);\r\n\r\n      streamedResults.push(stringValue);\r\n      cd.markForCheck();\r\n     \r\n      await printStream();\r\n    }\r\n    \r\n    await printStream();\r\n  }\r\n\r\n  validField(campo: string) {\r\n    return this.miFormulario.controls[campo]?.errors && this.miFormulario.controls[campo]?.touched\r\n  }\r\n\r\n  \r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}