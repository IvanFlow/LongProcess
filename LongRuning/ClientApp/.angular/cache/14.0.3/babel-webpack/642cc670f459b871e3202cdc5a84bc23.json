{"ast":null,"code":"import _asyncToGenerator from \"C:/repos/LongRuning/LongRuning/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet EncoderComponent = class EncoderComponent {\n  constructor(cd, formBuilder) {\n    this.cd = cd;\n    this.formBuilder = formBuilder;\n    this.streamedResults = [];\n    this.myForm = this.formBuilder.group({\n      textToEncode: ['', [Validators.required]]\n    });\n    this.getEncodedStreamed();\n  }\n\n  encodeText() {\n    console.log(\"encoded\");\n  }\n\n  getEncodedStreamed() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\n        allowHTTP1ForStreamingUpload: true\n      });\n\n      if (response.body == null) {\n        throw new Error('Not possible in current scenario');\n      }\n\n      const reader = response.body.getReader();\n      const streamedResults = _this.streamedResults;\n      const cd = _this.cd;\n\n      function printStream() {\n        return _printStream.apply(this, arguments);\n      }\n\n      function _printStream() {\n        _printStream = _asyncToGenerator(function* () {\n          const {\n            done,\n            value\n          } = yield reader.read();\n\n          if (done) {\n            return;\n          }\n\n          const textDecoder = new TextDecoder();\n          const stringValue = textDecoder.decode(value);\n          streamedResults.push(stringValue);\n          cd.markForCheck();\n          yield printStream();\n        });\n        return _printStream.apply(this, arguments);\n      }\n\n      yield printStream();\n    })();\n  }\n\n  validField(field) {\n    var _a, _b;\n\n    return ((_a = this.myForm.controls[field]) === null || _a === void 0 ? void 0 : _a.errors) && ((_b = this.myForm.controls[field]) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n};\nEncoderComponent = __decorate([Component({\n  selector: 'app-encoder',\n  templateUrl: './encoder.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], EncoderComponent);\nexport { EncoderComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,uBAAT,EAAqDC,SAArD,QAAsE,eAAtE;AACA,SAAiCC,UAAjC,QAAmD,gBAAnD;AAOA,IAAaC,gBAAgB,GAA7B,MAAaA,gBAAb,CAA6B;EAM3BC,YAA8BC,EAA9B,EAA6DC,WAA7D,EAAqF;IAAvD;IAA+B;IALtD,uBAA4B,EAA5B;IACP,cAAoB,KAAKA,WAAL,CAAiBC,KAAjB,CAAuB;MACzCC,YAAY,EAAE,CAAC,EAAD,EAAK,CAACN,UAAU,CAACO,QAAZ,CAAL;IAD2B,CAAvB,CAApB;IAKE,KAAKC,kBAAL;EACD;;EAEMC,UAAU;IACfC,OAAO,CAACC,GAAR,CAAY,SAAZ;EACD;;EAEYH,kBAAkB;IAAA;;IAAA;MAC7B,MAAMI,QAAQ,SAASC,KAAK,CAAC,iEAAD,EAAoE;QAC9FC,4BAA4B,EAAE;MADgE,CAApE,CAA5B;;MAGA,IAAIF,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;QACzB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;MACD;;MACD,MAAMC,MAAM,GAAGL,QAAQ,CAACG,IAAT,CAAcG,SAAd,EAAf;MAEA,MAAMC,eAAe,GAAG,KAAI,CAACA,eAA7B;MACA,MAAMhB,EAAE,GAAG,KAAI,CAACA,EAAhB;;MAV6B,SAYdiB,WAZc;QAAA;MAAA;;MAAA;QAAA,iCAY7B,aAA0B;UACxB,MAAM;YAAEC,IAAF;YAAQC;UAAR,UAAwBL,MAAM,CAACM,IAAP,EAA9B;;UACA,IAAIF,IAAJ,EAAU;YACR;UACD;;UACD,MAAMG,WAAW,GAAG,IAAIC,WAAJ,EAApB;UACA,MAAMC,WAAW,GAAGF,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,CAApB;UAEAH,eAAe,CAACS,IAAhB,CAAqBF,WAArB;UACAvB,EAAE,CAAC0B,YAAH;UAEA,MAAMT,WAAW,EAAjB;QACD,CAxB4B;QAAA;MAAA;;MA0B7B,MAAMA,WAAW,EAAjB;IA1B6B;EA2B9B;;EAEDU,UAAU,CAACC,KAAD,EAAc;;;IACtB,OAAO,YAAKC,MAAL,CAAYC,QAAZ,CAAqBF,KAArB,OAA2B,IAA3B,IAA2BG,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,MAA7B,MAAuC,WAAKH,MAAL,CAAYC,QAAZ,CAAqBF,KAArB,OAA2B,IAA3B,IAA2BK,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,OAApE,CAAP;EACD;;AA7C0B,CAA7B;AAAapC,gBAAgB,eAL5BF,SAAS,CAAC;EACTuC,QAAQ,EAAE,aADD;EAETC,WAAW,EAAE,0BAFJ;EAGTC,eAAe,EAAE1C,uBAAuB,CAAC2C;AAHhC,CAAD,CAKmB,GAAhBxC,gBAAgB,CAAhB;SAAAA","names":["ChangeDetectionStrategy","Component","Validators","EncoderComponent","constructor","cd","formBuilder","group","textToEncode","required","getEncodedStreamed","encodeText","console","log","response","fetch","allowHTTP1ForStreamingUpload","body","Error","reader","getReader","streamedResults","printStream","done","value","read","textDecoder","TextDecoder","stringValue","decode","push","markForCheck","validField","field","myForm","controls","_a","errors","_b","touched","selector","templateUrl","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-encoder',\r\n  templateUrl: './encoder.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EncoderComponent {\r\n  public streamedResults: string[] = [];\r\n  myForm: FormGroup = this.formBuilder.group({\r\n    textToEncode: ['', [Validators.required]]\r\n  });\r\n\r\n  constructor( private readonly cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    this.getEncodedStreamed();\r\n  }\r\n\r\n  public encodeText() {\r\n    console.log(\"encoded\");\r\n  }\r\n\r\n  public async getEncodedStreamed(): Promise<void> {\r\n    const response = await fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\r\n      allowHTTP1ForStreamingUpload: true,\r\n    } as any);\r\n    if (response.body == null) {\r\n      throw new Error('Not possible in current scenario');\r\n    }\r\n    const reader = response.body.getReader();\r\n\r\n    const streamedResults = this.streamedResults;\r\n    const cd = this.cd;\r\n\r\n    async function printStream(): Promise<void> {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      const textDecoder = new TextDecoder();\r\n      const stringValue = textDecoder.decode(value);\r\n\r\n      streamedResults.push(stringValue);\r\n      cd.markForCheck();\r\n     \r\n      await printStream();\r\n    }\r\n    \r\n    await printStream();\r\n  }\r\n\r\n  validField(field: string) {\r\n    return this.myForm.controls[field]?.errors && this.myForm.controls[field]?.touched\r\n  }\r\n\r\n  \r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}