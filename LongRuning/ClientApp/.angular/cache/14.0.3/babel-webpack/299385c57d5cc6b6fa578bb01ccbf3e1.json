{"ast":null,"code":"import _asyncToGenerator from \"C:/repos/LongRuning/LongRuning/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\n\nfunction FetchDataComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction FetchDataComponent_table_7_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const forecast_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.date);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.temperatureC);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.temperatureF);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r3.summary);\n  }\n}\n\nfunction FetchDataComponent_table_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 3)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Temp. (C)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Temp. (F)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Summary\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, FetchDataComponent_table_7_tr_12_Template, 9, 4, \"tr\", 4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.forecasts);\n  }\n}\n\nexport class FetchDataComponent {\n  constructor(http, baseUrl, cd) {\n    this.cd = cd;\n    this.forecasts = [];\n    this.encodedResult = '';\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => console.error(error));\n    this.getEncodedStreamed();\n  }\n\n  getEncodedStreamed() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://localhost:7141/EncodeBase64?textToEncode=abcd', {\n        allowHTTP1ForStreamingUpload: true\n      });\n\n      if (response.body == null) {\n        throw new Error('Not possible in current scenario');\n      }\n\n      const reader = response.body.getReader();\n      let encodedResult = _this.encodedResult;\n      const cd = _this.cd;\n\n      function printStream() {\n        return _printStream.apply(this, arguments);\n      }\n\n      function _printStream() {\n        _printStream = _asyncToGenerator(function* () {\n          const {\n            done,\n            value\n          } = yield reader.read();\n\n          if (done) {\n            return;\n          }\n\n          const textDecoder = new TextDecoder();\n          const stringValue = textDecoder.decode(value);\n          console.log(stringValue);\n          encodedResult += stringValue;\n          cd.markForCheck();\n          yield printStream();\n        });\n        return _printStream.apply(this, arguments);\n      }\n\n      yield printStream();\n    })();\n  }\n\n}\n\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 8,\n  vars: 3,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, FetchDataComponent_p_6_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(7, FetchDataComponent_table_7_Template, 13, 1, \"table\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.encodedResult);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.forecasts);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.forecasts);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;IAOAA,0BAAsB,CAAtB,EAAsB,IAAtB;IAA0BA;IAAUA;;;;;;IAYhCA,2BAAuC,CAAvC,EAAuC,IAAvC;IACMA;IAAmBA;IACvBA;IAAIA;IAA2BA;IAC/BA;IAAIA;IAA2BA;IAC/BA;IAAIA;IAAsBA;;;;;IAHtBA;IAAAA;IACAA;IAAAA;IACAA;IAAAA;IACAA;IAAAA;;;;;;IAdVA,iCAAkF,CAAlF,EAAkF,OAAlF,EAAkF,CAAlF,EAAkF,IAAlF,EAAkF,CAAlF,EAAkF,IAAlF;IAGUA;IAAIA;IACRA;IAAIA;IAASA;IACbA;IAAIA;IAASA;IACbA;IAAIA;IAAOA;IAGfA;IACEA;IAMFA;;;;;IAN2BA;IAAAA;;;;ACR7B,OAAM,MAAOC,kBAAP,CAAyB;EAI7BC,YAAYC,IAAZ,EAAkDC,OAAlD,EAAoFC,EAApF,EAAyG;IAArB;IAH7E,iBAA+B,EAA/B;IACA,qBAAoC,EAApC;IAILF,IAAI,CAACG,GAAL,CAA4BF,OAAO,GAAG,iBAAtC,EAAyDG,SAAzD,CAAmEC,MAAM,IAAG;MAC1E,KAAKC,SAAL,GAAiBD,MAAjB;IACD,CAFD,EAEGE,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAFZ;IAIA,KAAKE,kBAAL;EAGD;;EAIYA,kBAAkB;IAAA;;IAAA;MAC7B,MAAMC,QAAQ,SAASC,KAAK,CAAC,uDAAD,EAA0D;QACpFC,4BAA4B,EAAE;MADsD,CAA1D,CAA5B;;MAGA,IAAIF,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;QACzB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;MACD;;MACD,MAAMC,MAAM,GAAGL,QAAQ,CAACG,IAAT,CAAcG,SAAd,EAAf;MAEA,IAAIC,aAAa,GAAG,KAAI,CAACA,aAAzB;MACA,MAAMf,EAAE,GAAG,KAAI,CAACA,EAAhB;;MAV6B,SAYdgB,WAZc;QAAA;MAAA;;MAAA;QAAA,iCAY7B,aAA0B;UACxB,MAAM;YAAEC,IAAF;YAAQC;UAAR,UAAwBL,MAAM,CAACM,IAAP,EAA9B;;UACA,IAAIF,IAAJ,EAAU;YACR;UACD;;UACD,MAAMG,WAAW,GAAG,IAAIC,WAAJ,EAApB;UACA,MAAMC,WAAW,GAAGF,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,CAApB;UAEAZ,OAAO,CAACkB,GAAR,CAAYF,WAAZ;UAEAP,aAAa,IAAIO,WAAjB;UACAtB,EAAE,CAACyB,YAAH;UAIA,MAAMT,WAAW,EAAjB;QACD,CA5B4B;QAAA;MAAA;;MA8B7B,MAAMA,WAAW,EAAjB;IA9B6B;EA+B9B;;AAhD4B;;;mBAAlBpB,oBAAkBD,0DAIS,UAJT,GAImBA;AAAA;;;QAJrCC;EAAkB8B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDX/BnC;MAAoBA;MAAgBA;MAEpCA;MAAGA;MAA0DA;MAE7DA;MAAGA;MAAiBA;MAGpBA;MAEAA;;;;MALGA;MAAAA;MAGCA;MAAAA;MAE6DA;MAAAA","names":["i0","FetchDataComponent","constructor","http","baseUrl","cd","get","subscribe","result","forecasts","error","console","getEncodedStreamed","response","fetch","allowHTTP1ForStreamingUpload","body","Error","reader","getReader","encodedResult","printStream","done","value","read","textDecoder","TextDecoder","stringValue","decode","log","markForCheck","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p>{{encodedResult}}</p>\r\n\r\n\r\n<p *ngIf=\"!forecasts\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.date }}</td>\r\n      <td>{{ forecast.temperatureC }}</td>\r\n      <td>{{ forecast.temperatureF }}</td>\r\n      <td>{{ forecast.summary }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { ChangeDetectorRef, Component, Inject } from '@angular/core';\r\nimport { HttpClient, HttpDownloadProgressEvent, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';\r\nimport { concatMap } from 'rxjs/internal/operators/concatMap';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { map } from 'rxjs/internal/operators/map';\r\nimport { last, tap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[] = [];\r\n  public encodedResult: string | undefined = '';\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, private readonly cd: ChangeDetectorRef) {\r\n\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n\r\n    this.getEncodedStreamed();\r\n\r\n\r\n  }\r\n\r\n  \r\n\r\n  public async getEncodedStreamed(): Promise<void> {\r\n    const response = await fetch('https://localhost:7141/EncodeBase64?textToEncode=abcd', {\r\n      allowHTTP1ForStreamingUpload: true,\r\n    } as any);\r\n    if (response.body == null) {\r\n      throw new Error('Not possible in current scenario');\r\n    }\r\n    const reader = response.body.getReader();\r\n\r\n    let encodedResult = this.encodedResult;\r\n    const cd = this.cd;\r\n\r\n    async function printStream(): Promise<void> {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      const textDecoder = new TextDecoder();\r\n      const stringValue = textDecoder.decode(value);\r\n      \r\n      console.log(stringValue);\r\n\r\n      encodedResult += stringValue;\r\n      cd.markForCheck();\r\n\r\n     \r\n\r\n      await printStream();\r\n    }\r\n    \r\n    await printStream();\r\n  }\r\n\r\n  //private async function printStream(reader: ReadableStreamDefaultReader<Uint8Array>): Promise<void> {\r\n  //  const { done, value } = await reader.read();\r\n  //  if (done) {\r\n  //    return;\r\n  //  }\r\n  //  const textDecoder = new TextDecoder();\r\n  //  const stringValue = textDecoder.decode(value);\r\n\r\n  //  console.log(stringValue)\r\n\r\n  //  await printStream();\r\n  //}\r\n\r\n  \r\n\r\n\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}