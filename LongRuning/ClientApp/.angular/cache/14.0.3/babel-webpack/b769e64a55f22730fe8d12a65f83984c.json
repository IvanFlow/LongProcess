{"ast":null,"code":"import _asyncToGenerator from \"C:/repos/LongRuning/LongRuning/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\n\nfunction EncoderComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \" Required Field \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class EncoderComponent {\n  constructor(cd, formBuilder) {\n    this.cd = cd;\n    this.formBuilder = formBuilder;\n    this.streamedResults = [];\n    this.myForm = this.formBuilder.group({\n      textToEncode: ['', [Validators.required]]\n    });\n    this.breakStream = false;\n    this.convertDisable = true;\n  }\n\n  encodeText() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      if (_this.myForm.invalid) {\n        _this.myForm.markAllAsTouched();\n\n        return;\n      }\n\n      _this.convertDisable = true;\n      const textToEncode = (_a = _this.myForm.controls['textToEncode']) === null || _a === void 0 ? void 0 : _a.value;\n      yield _this.getEncodedStreamed(textToEncode);\n      _this.convertDisable = false;\n    })();\n  }\n\n  getEncodedStreamed(textToEncode) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=${textToEncode}`, {\n        allowHTTP1ForStreamingUpload: true\n      });\n\n      if (response.body == null) {\n        throw new Error('Not possible in current scenario');\n      }\n\n      const reader = response.body.getReader();\n      const streamedResults = _this2.streamedResults;\n      const cd = _this2.cd;\n      let breakS = _this2.breakStream;\n\n      function printStream() {\n        return _printStream.apply(this, arguments);\n      }\n\n      function _printStream() {\n        _printStream = _asyncToGenerator(function* () {\n          const {\n            done,\n            value\n          } = yield reader.read();\n\n          if (done) {\n            return;\n          }\n\n          const textDecoder = new TextDecoder();\n          const stringValue = textDecoder.decode(value);\n          streamedResults.push(stringValue);\n          cd.markForCheck();\n          yield printStream();\n        });\n        return _printStream.apply(this, arguments);\n      }\n\n      yield printStream();\n    })();\n  }\n\n  validField(field) {\n    var _a, _b;\n\n    return ((_a = this.myForm.controls[field]) === null || _a === void 0 ? void 0 : _a.errors) && ((_b = this.myForm.controls[field]) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n  stopStream() {\n    this.breakStream = true;\n  }\n\n  disableConvert() {\n    return this.convertDisable;\n  }\n\n}\n\nEncoderComponent.ɵfac = function EncoderComponent_Factory(t) {\n  return new (t || EncoderComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nEncoderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EncoderComponent,\n  selectors: [[\"app-encoder\"]],\n  decls: 27,\n  vars: 4,\n  consts: [[1, \"row\"], [1, \"col\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"row\"], [1, \"col-sm-3\", \"col-form-label\"], [1, \"col-sm-9\"], [\"type\", \"text\", \"placeholder\", \"Text to encode\", \"formControlName\", \"textToEncode\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"float-end\", 3, \"disabled\"], [1, \"form-text\", \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"float-end\", 3, \"click\"], [1, \"form-text\", \"text-danger\"]],\n  template: function EncoderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Encoder: \");\n      i0.ɵɵelementStart(2, \"small\");\n      i0.ɵɵtext(3, \"Base64\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"div\", 0)(6, \"div\", 1)(7, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function EncoderComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.encodeText();\n      });\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 4);\n      i0.ɵɵtext(10, \"Text To Encode:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 5);\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵtemplate(13, EncoderComponent_span_13_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 3)(15, \"div\", 1)(16, \"button\", 8);\n      i0.ɵɵtext(17, \" Convert \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(18, \"div\", 3)(19, \"label\", 4);\n      i0.ɵɵtext(20, \"Encoded Text:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 5)(22, \"span\", 9);\n      i0.ɵɵtext(23);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"div\", 1)(25, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function EncoderComponent_Template_button_click_25_listener() {\n        return ctx.stopStream();\n      });\n      i0.ɵɵtext(26, \" Cancel \");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.validField(\"textToEncode\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.disableConvert());\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate1(\" \", ctx.streamedResults.join(\"\"), \" \");\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","EncoderComponent","constructor","cd","formBuilder","group","textToEncode","required","encodeText","myForm","invalid","markAllAsTouched","convertDisable","controls","_a","value","getEncodedStreamed","response","fetch","allowHTTP1ForStreamingUpload","body","Error","reader","getReader","streamedResults","breakS","breakStream","printStream","done","read","textDecoder","TextDecoder","stringValue","decode","push","markForCheck","validField","field","errors","_b","touched","stopStream","disableConvert","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.ts","C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-encoder',\r\n  templateUrl: './encoder.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EncoderComponent {\r\n  public streamedResults: string[] = [];\r\n  myForm: FormGroup = this.formBuilder.group({\r\n    textToEncode: ['', [Validators.required]]\r\n  });\r\n  breakStream: boolean = false;\r\n  convertDisable: boolean = true;\r\n\r\n  constructor( private readonly cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    \r\n  }\r\n\r\n  public async encodeText() {\r\n    if (this.myForm.invalid) {\r\n      this.myForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.convertDisable = true;\r\n    const textToEncode = this.myForm.controls['textToEncode']?.value;\r\n    await this.getEncodedStreamed(textToEncode);\r\n    this.convertDisable = false;\r\n\r\n  }\r\n\r\n  public async getEncodedStreamed(textToEncode: string): Promise<void> {\r\n    const response = await fetch(`https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=${textToEncode}`, {\r\n      allowHTTP1ForStreamingUpload: true,\r\n    } as any);\r\n    if (response.body == null) {\r\n      throw new Error('Not possible in current scenario');\r\n    }\r\n    const reader = response.body.getReader();\r\n\r\n    const streamedResults = this.streamedResults;\r\n    const cd = this.cd;\r\n    let breakS = this.breakStream;\r\n\r\n    async function printStream(): Promise<void> {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      const textDecoder = new TextDecoder();\r\n      const stringValue = textDecoder.decode(value);\r\n\r\n      streamedResults.push(stringValue);\r\n      cd.markForCheck();\r\n     \r\n      await printStream();\r\n    }\r\n    \r\n    await printStream();\r\n  }\r\n\r\n  validField(field: string) {\r\n    return this.myForm.controls[field]?.errors && this.myForm.controls[field]?.touched\r\n  }\r\n\r\n  stopStream() {\r\n    this.breakStream = true;\r\n  }\r\n\r\n  disableConvert(): boolean {\r\n    return this.convertDisable;\r\n  }\r\n\r\n  \r\n\r\n\r\n}\r\n","\r\n<h2>Encoder: <small>Base64</small></h2>\r\n<hr>\r\n<div class=\"row\">\r\n  <div class=\"col\">\r\n    <form (ngSubmit)=\"encodeText()\" [formGroup]=\"myForm\">\r\n\r\n      <div class=\"mb-3 row\">\r\n        <label class=\"col-sm-3 col-form-label\">Text To Encode:</label>\r\n        <div class=\"col-sm-9\">\r\n          <input type=\"text\"\r\n                 class=\"form-control\"\r\n                 placeholder=\"Text to encode\"\r\n                 formControlName=\"textToEncode\">\r\n\r\n          <span class=\"form-text text-danger\"\r\n                *ngIf=\"validField('textToEncode')\">\r\n            Required Field\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mb-3 row\">\r\n\r\n        <div class=\"col\">\r\n          <button type=\"submit\"\r\n                  class=\"btn btn-primary float-end\"\r\n                  [disabled]=\"disableConvert()\">\r\n            Convert\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </form>\r\n    <div class=\"mb-3 row\">\r\n\r\n      <label class=\"col-sm-3 col-form-label\">Encoded Text:</label>\r\n      <div class=\"col-sm-9\">\r\n        <span class=\"form-text form-control\">\r\n          {{streamedResults.join(\"\")}}\r\n        </span>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"col\">\r\n      <button type=\"button\" (click)=\"stopStream()\"\r\n              class=\"btn btn-danger float-end\">\r\n        Cancel\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}