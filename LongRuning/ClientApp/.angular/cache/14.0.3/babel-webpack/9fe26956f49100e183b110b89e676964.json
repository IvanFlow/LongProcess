{"ast":null,"code":"import _asyncToGenerator from \"C:/repos/LongRuning/LongRuning/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class EncoderComponent {\n  constructor(cd, formBuilder) {\n    this.cd = cd;\n    this.formBuilder = formBuilder;\n    this.streamedResults = [];\n    this.myForm = this.formBuilder.group({\n      textToEncode: ['']\n    });\n    this.getEncodedStreamed();\n  }\n\n  encodeText() {\n    console.log(\"encoded\");\n  }\n\n  getEncodedStreamed() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\n        allowHTTP1ForStreamingUpload: true\n      });\n\n      if (response.body == null) {\n        throw new Error('Not possible in current scenario');\n      }\n\n      const reader = response.body.getReader();\n      const streamedResults = _this.streamedResults;\n      const cd = _this.cd;\n\n      function printStream() {\n        return _printStream.apply(this, arguments);\n      }\n\n      function _printStream() {\n        _printStream = _asyncToGenerator(function* () {\n          const {\n            done,\n            value\n          } = yield reader.read();\n\n          if (done) {\n            return;\n          }\n\n          const textDecoder = new TextDecoder();\n          const stringValue = textDecoder.decode(value);\n          streamedResults.push(stringValue);\n          cd.markForCheck();\n          yield printStream();\n        });\n        return _printStream.apply(this, arguments);\n      }\n\n      yield printStream();\n    })();\n  }\n\n}\n\nEncoderComponent.ɵfac = function EncoderComponent_Factory(t) {\n  return new (t || EncoderComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nEncoderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EncoderComponent,\n  selectors: [[\"app-encoder\"]],\n  decls: 8,\n  vars: 1,\n  consts: [[3, \"ngSubmit\"]],\n  template: function EncoderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Encoder: \");\n      i0.ɵɵelementStart(2, \"small\");\n      i0.ɵɵtext(3, \"Base64\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EncoderComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.encodeText();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.streamedResults.join(\"\"));\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,gBAAP,CAAuB;EAM3BC,YAA8BC,EAA9B,EAA6DC,WAA7D,EAAqF;IAAvD;IAA+B;IALtD,uBAA4B,EAA5B;IACP,cAAoB,KAAKA,WAAL,CAAiBC,KAAjB,CAAuB;MACzCC,YAAY,EAAE,CAAC,EAAD;IAD2B,CAAvB,CAApB;IAKE,KAAKC,kBAAL;EACD;;EAEMC,UAAU;IACfC,OAAO,CAACC,GAAR,CAAY,SAAZ;EACD;;EAEYH,kBAAkB;IAAA;;IAAA;MAC7B,MAAMI,QAAQ,SAASC,KAAK,CAAC,iEAAD,EAAoE;QAC9FC,4BAA4B,EAAE;MADgE,CAApE,CAA5B;;MAGA,IAAIF,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;QACzB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;MACD;;MACD,MAAMC,MAAM,GAAGL,QAAQ,CAACG,IAAT,CAAcG,SAAd,EAAf;MAEA,MAAMC,eAAe,GAAG,KAAI,CAACA,eAA7B;MACA,MAAMf,EAAE,GAAG,KAAI,CAACA,EAAhB;;MAV6B,SAYdgB,WAZc;QAAA;MAAA;;MAAA;QAAA,iCAY7B,aAA0B;UACxB,MAAM;YAAEC,IAAF;YAAQC;UAAR,UAAwBL,MAAM,CAACM,IAAP,EAA9B;;UACA,IAAIF,IAAJ,EAAU;YACR;UACD;;UACD,MAAMG,WAAW,GAAG,IAAIC,WAAJ,EAApB;UACA,MAAMC,WAAW,GAAGF,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,CAApB;UAEAH,eAAe,CAACS,IAAhB,CAAqBF,WAArB;UACAtB,EAAE,CAACyB,YAAH;UAEA,MAAMT,WAAW,EAAjB;QACD,CAxB4B;QAAA;MAAA;;MA0B7B,MAAMA,WAAW,EAAjB;IA1B6B;EA2B9B;;AAzC0B;;;mBAAhBlB,kBAAgB4B;AAAA;;;QAAhB5B;EAAgB6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP7BL;MAAIA;MAASA;MAAOA;MAAMA;MAC1BA;MACAA;MAAMA;QAAA,OAAYM,gBAAZ;MAAwB,CAAxB;MAENN;MACAA;MAAGA;MAA4BA;;;;MAA5BA;MAAAA","names":["EncoderComponent","constructor","cd","formBuilder","group","textToEncode","getEncodedStreamed","encodeText","console","log","response","fetch","allowHTTP1ForStreamingUpload","body","Error","reader","getReader","streamedResults","printStream","done","value","read","textDecoder","TextDecoder","stringValue","decode","push","markForCheck","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.ts","C:\\repos\\LongRuning\\LongRuning\\ClientApp\\src\\app\\encoder\\encoder.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-encoder',\r\n  templateUrl: './encoder.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EncoderComponent {\r\n  public streamedResults: string[] = [];\r\n  myForm: FormGroup = this.formBuilder.group({\r\n    textToEncode: ['']\r\n  });\r\n\r\n  constructor( private readonly cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    this.getEncodedStreamed();\r\n  }\r\n\r\n  public encodeText() {\r\n    console.log(\"encoded\");\r\n  }\r\n\r\n  public async getEncodedStreamed(): Promise<void> {\r\n    const response = await fetch('https://localhost:7141/Encoder/EncodeBase64V2?textToEncode=abcd', {\r\n      allowHTTP1ForStreamingUpload: true,\r\n    } as any);\r\n    if (response.body == null) {\r\n      throw new Error('Not possible in current scenario');\r\n    }\r\n    const reader = response.body.getReader();\r\n\r\n    const streamedResults = this.streamedResults;\r\n    const cd = this.cd;\r\n\r\n    async function printStream(): Promise<void> {\r\n      const { done, value } = await reader.read();\r\n      if (done) {\r\n        return;\r\n      }\r\n      const textDecoder = new TextDecoder();\r\n      const stringValue = textDecoder.decode(value);\r\n\r\n      streamedResults.push(stringValue);\r\n      cd.markForCheck();\r\n     \r\n      await printStream();\r\n    }\r\n    \r\n    await printStream();\r\n  }\r\n\r\n  \r\n\r\n\r\n}\r\n","\r\n<h2>Encoder: <small>Base64</small></h2>\r\n<hr>\r\n<form (ngSubmit)=\"encodeText()\">\r\n\r\n</form>\r\n<p>{{streamedResults.join(\"\")}}</p>\r\n"]},"metadata":{},"sourceType":"module"}